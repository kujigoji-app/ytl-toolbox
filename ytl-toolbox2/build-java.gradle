/* ============================================================================
   This file contains the configurations for
   Java settings
   ============================================================================

   Included from: "${rootProject.projectDir}/build.gradle"
   ============================================================================
 */
apply plugin: 'java'

/* Setup UTF-8 for compile AND test compilation*/
[ compileJava, compileTestJava, javadoc ]*.options*.encoding = 'UTF-8'

sourceCompatibility = '1.8'

/* Default dependencies for all sub projects. */
dependencies{
	testCompile library.junit
	testCompile library.mockito_all
	compile group: 'com.google.apis', name: 'google-api-services-youtube', version: 'latest.release'
	// https://mvnrepository.com/artifact/com.google.oauth-client/google-oauth-client-java6
	compile group: 'com.google.oauth-client', name: 'google-oauth-client-java6', version: 'latest.release'
	// https://mvnrepository.com/artifact/com.google.oauth-client/google-oauth-client-jetty
	compile group: 'com.google.oauth-client', name: 'google-oauth-client-jetty', version: 'latest.release'
	// https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
	testCompile group: 'ch.qos.logback', name: 'logback-classic', version: 'latest.release'
	// https://mvnrepository.com/artifact/org.slf4j/slf4j-api
	compile group: 'org.slf4j', name: 'slf4j-api', version: 'latest.release'
	// https://mvnrepository.com/artifact/org.yaml/snakeyaml
	compile group: 'org.yaml', name: 'snakeyaml', version: 'latest.release'
	// https://mvnrepository.com/artifact/org.projectlombok/lombok
	compileOnly  group: 'org.projectlombok', name: 'lombok', version: 'latest.release'
	// http://fxexperience.com/controlsfx/
	compile 'org.controlsfx:controlsfx:8.40.14'
}

/* Per default GRADLE stops the build if one single test fails. We want to have all tests executed. */
test {
      ignoreFailures = true
}

/**
 * Task to create source jars
 */
task sourcesJar(type: Jar, dependsOn:classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

/**
 * Task to create javadoc jars
 */
task javadocJar(type: Jar, dependsOn:javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

/**
 * Define artifacts
 */
artifacts {
	archives sourcesJar
	archives javadocJar
}